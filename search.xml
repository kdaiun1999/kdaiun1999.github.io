<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据库基础</title>
    <url>/2022/12/14/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>​        这里记录着自学的<strong>数据库</strong>基础知识，以及自己的深入理解</p>
<span id="more"></span>

<h1 id="数据库分库"><a href="#数据库分库" class="headerlink" title="数据库分库"></a>数据库分库</h1><p>问：什么是数据库分库？</p>
<p>答：由于业务场景下所产生的数据量较大，我们通过分库来降低数据库压力，通过特定的一些条件，我们将数据分散到不同的物理库，以达到分散单台物理库负载。分为垂直切分和水平切分。</p>
<h2 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h2><p>垂直切分就是将集中在一台单数据库上的表分到多个数据库中，以达到分散的效果，压力就被分摊到各个物理库上了。</p>
<p>这里可以理解为我们可以将业务切分成不同的模块，然后把每一个模块所需要的表分装到一个物理库上。</p>
<h2 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h2><p>按照某个字段的某种规则分散到多个库中，这里就可以理解为将一张表中的数据根据某些条件，比如我们甚至可以细分到将每一个用户对应到一个库上。<strong>水平切分最最重要的就是切分的维度</strong>，集中典型分片规则比如：按照用户Id、日期（不同月）</p>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2022/11/24/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>​        这里记录着自学的Java基础知识，以及自己的深入理解</p>
<span id="more"></span>

<h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><table>
<thead>
<tr>
<th align="left">类别</th>
<th align="left">关键字</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">访问控制</td>
<td align="left">private</td>
<td align="left">私有的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">protected</td>
<td align="left">受保护的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">public</td>
<td align="left">公共的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">default</td>
<td align="left">默认</td>
</tr>
<tr>
<td align="left">类、方法和变量修饰符</td>
<td align="left">abstract</td>
<td align="left">声明抽象</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">class</td>
<td align="left">类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">extends</td>
<td align="left">扩充,继承</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">final</td>
<td align="left">最终值,不可改变的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">implements</td>
<td align="left">实现（接口）</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">interface</td>
<td align="left">接口</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">native</td>
<td align="left">本地，原生方法（非 Java 实现）</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">new</td>
<td align="left">新,创建</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">static</td>
<td align="left">静态</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">strictfp</td>
<td align="left">严格,精准</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">synchronized</td>
<td align="left">线程,同步</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">transient</td>
<td align="left">短暂</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">volatile</td>
<td align="left">易失</td>
</tr>
<tr>
<td align="left">程序控制语句</td>
<td align="left">break</td>
<td align="left">跳出循环</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">case</td>
<td align="left">定义一个值以供 switch 选择</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">continue</td>
<td align="left">继续</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">do</td>
<td align="left">运行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">else</td>
<td align="left">否则</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">for</td>
<td align="left">循环</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">if</td>
<td align="left">如果</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">instanceof</td>
<td align="left">实例</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">return</td>
<td align="left">返回</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">switch</td>
<td align="left">根据值选择执行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">while</td>
<td align="left">循环</td>
</tr>
<tr>
<td align="left">错误处理</td>
<td align="left">assert</td>
<td align="left">断言表达式是否为真</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">catch</td>
<td align="left">捕捉异常</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">finally</td>
<td align="left">有没有异常都执行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">throw</td>
<td align="left">抛出一个异常对象</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">throws</td>
<td align="left">声明一个异常可能被抛出</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">try</td>
<td align="left">捕获异常</td>
</tr>
<tr>
<td align="left">包相关</td>
<td align="left">import</td>
<td align="left">引入</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">package</td>
<td align="left">包</td>
</tr>
<tr>
<td align="left">基本类型</td>
<td align="left">boolean</td>
<td align="left">布尔型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">byte</td>
<td align="left">字节型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">char</td>
<td align="left">字符型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">double</td>
<td align="left">双精度浮点</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">float</td>
<td align="left">单精度浮点</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">int</td>
<td align="left">整型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">long</td>
<td align="left">长整型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">short</td>
<td align="left">短整型</td>
</tr>
<tr>
<td align="left">变量引用</td>
<td align="left">super</td>
<td align="left">父类,超类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">this</td>
<td align="left">本类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">void</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">保留关键字</td>
<td align="left">goto</td>
<td align="left">是关键字，但不能使用</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">const</td>
<td align="left">是关键字，但不能使用</td>
</tr>
</tbody></table>
<h1 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1 基本数据类型"></a>1 基本数据类型</h1><p>一共有8种，整形有byte、short、int、long，浮点型float、double，字符型char、布尔型boolean。</p>
<p>整形不同点在于表示的范围不一样，比如byte为1字节，即8位，一般第一位是符号，所以表示的范围是[-2^7，2^7-1]—[-128，127]</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>占用内存</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1字节</td>
<td>[-128，127]——[-2^7，2^7-1]</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>[-32768，32767]——[-2^15，2^15-1]</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>[-2147483648，2147483647]——[-2^31，2^31-1]</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>[-9223372036854775808，9223372036854775807]——[-2^63，2^63-1]</td>
</tr>
</tbody></table>
<h1 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2 变量类型"></a>2 变量类型</h1><h1 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3 修饰符"></a>3 修饰符</h1><h2 id="3-1-访问修饰符"><a href="#3-1-访问修饰符" class="headerlink" title="3.1 访问修饰符"></a>3.1 访问修饰符</h2><p>public、protected、default、private</p>
<p>他们的区别在于访问的权限不同，可以用于不同的用法</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">当前类</th>
<th align="left">同一包内</th>
<th align="left">子孙类(同一包)</th>
<th align="left">子孙类(不同包)</th>
<th align="left">其他包</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>public</code></td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left"><code>protected</code></td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y/N</td>
<td align="left">N</td>
</tr>
<tr>
<td align="left"><code>default</code></td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">N</td>
<td align="left">N</td>
</tr>
<tr>
<td align="left"><code>private</code></td>
<td align="left">Y</td>
<td align="left">N</td>
<td align="left">N</td>
<td align="left">N</td>
<td align="left">N</td>
</tr>
</tbody></table>
<p>为什么用private去修饰JavaBean？</p>
<p>官方解释：保证它的封装性，不被其他类可以访问到，只能通过类中公共的getter和setter方法去访问，用来隐藏类的实现细节和保护类的数据。</p>
<p>如果我们使用public是为了其他地方可以使用到该类以及类中的方法、变量；而使用private我们就可以对变量的getter和setter方法进行特殊处理，下面举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里就可以直接返回年龄+1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里同样也可以设置get和set方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面三个例子可以看出其实private就是为了使用getter和setter方法，用这个的好处在于如果有特殊处理我们就可以在getter和setter函数中进行处理，否则如果直接用第三种方法我们就需要对每一处用到的地方去做特殊处理，这就会牵一发而动全身，同样地我们也可以用第二种方式来做，但Java约定俗称地使用private（第二种是可以直接使用对象访问到属性的，看起来不安全）</p>
<p>参考：<a href="https://blog.csdn.net/kennethf6986/article/details/83771134">https://blog.csdn.net/kennethf6986/article/details/83771134</a></p>
<h2 id="3-2-非访问修饰符"><a href="#3-2-非访问修饰符" class="headerlink" title="3.2 非访问修饰符"></a>3.2 非访问修饰符</h2><h3 id="3-2-1-static"><a href="#3-2-1-static" class="headerlink" title="3.2.1 static"></a>3.2.1 static</h3><p><strong>修饰类方法和类变量、静态代码块</strong></p>
<p>当我们的类首次被加载的时候，会将静态的变量加载到数据区的方法区，所有创建的实例对象都共享这个变量，它属于一个静态的公共资源，我们可以直接通过类名.变量名对其进行访问，也可以通过对象名.变量名对其进行访问。类首次加载的时候，静态资源加载比构造函数还要先一步，这里的步骤是：加载静态资源—&gt;访问构造函数。</p>
<h4 id="①-修饰类变量："><a href="#①-修饰类变量：" class="headerlink" title="① 修饰类变量："></a>① 修饰类变量：</h4><p>我们可以在类中定义static类变量，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    Test(<span class="type">int</span> i) &#123;</span><br><span class="line">        age = age + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就定义了一个静态的变量，当我们首次创建这个类对象的时候，它会先被加载到数据区的方法区（公共的静态资源区域，可以被该类、该类创建的对象共同访问，且数据共享）。</p>
<p>举个例子，我们在主函数的类中定义一个static变量，在我们启动的时候会先去加载这个变量，然后才是主函数，且全局可以访问该变量。</p>
<p>以上面的例子来说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象，加载age到方法区，再执行构造函数</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="number">1</span>);</span><br><span class="line">        System.out.println(test1.age);	<span class="comment">// 输出结果为11</span></span><br><span class="line">        <span class="comment">// 创建对象，执行构造函数</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="number">2</span>);		<span class="comment">// 上面age结果11，这里加2</span></span><br><span class="line">        System.out.println(test2.age);	<span class="comment">// 输出结果为13</span></span><br><span class="line">        <span class="comment">//	创建对象，执行构造函数</span></span><br><span class="line">        <span class="type">Tets</span> <span class="variable">test3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="number">3</span>);		<span class="comment">// 上面age结果13，这里加3</span></span><br><span class="line">        System.out.println(test3.age);	<span class="comment">// 输出结果为16</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="②-修饰类方法："><a href="#②-修饰类方法：" class="headerlink" title="② 修饰类方法："></a>② 修饰类方法：</h4><p>我们可以在类中定义static方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">virtualAge</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">realAge</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(virtualAge);	<span class="comment">// 报错，因为static方法不能使用this</span></span><br><span class="line">        System.out.println(realAge);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAge1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.virtualAge);</span><br><span class="line">        System.out.println(realAge);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.realAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出static修饰的方法不能够使用this指向当前类，只能够调用静态变量，不能访问实例变量。</p>
<p><strong>问：我们为什么用static？</strong></p>
<p>答：我们使用static修饰方法可以直接通过 类.方法 去调用方法，static可以理解成它被赋予在类上，而不是一个副本变量对象上了，我们不能通过this去访问当前类非static属性的变量和方法，以下举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getAge1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③-静态代码块："><a href="#③-静态代码块：" class="headerlink" title="③ 静态代码块："></a>③ 静态代码块：</h4><p>同样地在类加载阶段会先去调用它。它和静态变量同级，谁在前先走谁。</p>
<p><strong>？？？？？？？？？？？？那我们可以用static来做什么呢？？？？？？？？？？？？？？？</strong></p>
<p>场景1：我们需要记录创建的一个实例总数，我们就可以在类中定义一个static的变量count = 0，构造函数中写count++，表明当我们创建一个实例对象的时候数量就+1。</p>
<p><strong>注意：</strong>同样地，我们的static静态代码块也不能够使用this指向当前类，不能访问实例变量，只能调用静态变量。</p>
<h4 id="④-总结："><a href="#④-总结：" class="headerlink" title="④ 总结："></a>④ 总结：</h4><blockquote>
<p>1、static可以用来修饰类变量、类方法和类静态块</p>
<p>2、初次调用类（静态变量、静态方法）或者创建该类对象（new Test()）时，它会加载类中的静态变量和静态块，静态方法不会被加载，只有当我们调用才会进入。这些加载的静态变量和静态块被存放在公共静态资源区域。</p>
<p>3、静态变量我们通常用来作为全局使用的一个变量；静态方法我们通常用它做工具类方法。</p>
<p>4、我们在静态方法中不能使用this去指向当前类对象获取非静态资源，如果要使用非静态资源就不能使用静态方法或者将非静态变量换成静态变量。</p>
<p>5、构造方法只有在创建该类对象时才会去调用，但是初次创建会先调用静态变量和静态块。</p>
<p>6、this的一点理解，我们的this是指向当前对象的，可以理解为这个副本，而非静态变量和非静态方法其实对应的是这个对象上的一个属性和行为，我们用this就可以获取到当前对象的这个属性和行为，而加了static就表明这不是个人使用的，是整个类的，是大家所共有的，所以规定成不能使用this指向，static修饰的变量和方法是可以直接通过类去访问的。</p>
</blockquote>
<h3 id="3-2-2-final"><a href="#3-2-2-final" class="headerlink" title="3.2.2 final"></a>3.2.2 final</h3><p>final是一个保留关键字，可以声明变量、方法、类，使用final声明将无法改变这个引用，不能再被初始化。</p>
<p><strong>修饰类变量、类方法、类</strong></p>
<h4 id="①-修饰类变量"><a href="#①-修饰类变量" class="headerlink" title="① 修饰类变量"></a>① 修饰类变量</h4><p>用final修饰类变量，表示它不可被修改，且必须初始化值如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>final变量是只读的，不可被修改，经常和static一起作为常量。</p>
<p><strong>思考：我们为什么要使用final跟static一起使用呢？</strong></p>
<p>答：static特性就是它可以直接通过类来调用，那我们使用static加final就可以让一个变量变成类常量供我们使用。而不适用static的话，我们只用final修饰的变量它是在对象上才可调用。</p>
<p>我们还可以使用final修饰对象，如下例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">        <span class="comment">// people的地址被固定了，但里面的属性值是可以改变的</span></span><br><span class="line">        people.age = <span class="number">19</span>;		<span class="comment">// 正确√</span></span><br><span class="line">        people =  <span class="keyword">new</span> <span class="title class_">People</span>();		<span class="comment">// 报错×</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="②-修饰类方法"><a href="#②-修饰类方法" class="headerlink" title="② 修饰类方法"></a>② 修饰类方法</h4>]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>多线程知识</title>
    <url>/2022/12/14/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="前言：理论知识"><a href="#前言：理论知识" class="headerlink" title="前言：理论知识"></a>前言：理论知识</h2><h4 id="1、什么是进程线程？"><a href="#1、什么是进程线程？" class="headerlink" title="1、什么是进程线程？"></a>1、什么是进程线程？</h4><p>java运行程序之后，会先启动JVM，JVM就是一个进程。</p>
<p>JVM启动主线程调用main方法，同时再启动一个垃圾回收线程负责看护，回收线程（这两个线程并发）</p>
<h4 id="2、进程和线程关系？"><a href="#2、进程和线程关系？" class="headerlink" title="2、进程和线程关系？"></a>2、进程和线程关系？</h4><p>不同进程：进程A和进程B <strong>内存独立不共享</strong></p>
<p>不同线程：线程A和线程B， <strong>堆内存</strong> 和 <strong>方法区</strong> 内存共享，但是 <strong>栈内存</strong> 独立，一个线程一个栈，当开启N个线程时，会有N个栈空间，每个栈之间互补干扰，各自执行，这就是 <strong>多线程并发</strong></p>
<h4 id="3、真正的多线程并发"><a href="#3、真正的多线程并发" class="headerlink" title="3、真正的多线程并发"></a>3、真正的多线程并发</h4><p>t1线程执行t1的，t2线程执行t2的。t1不会影响t2，t2也不会影响t1，这叫做真正的多线程并发。</p>
<h4 id="4、线程对象的生命周期"><a href="#4、线程对象的生命周期" class="headerlink" title="4、线程对象的生命周期"></a>4、线程对象的生命周期</h4><p><img src="/images/%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86/String%E5%9C%A8%E6%A0%88%E5%92%8C%E5%A0%86%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98.png" alt="String在栈和堆中的内存"></p>
<h5 id="4-1-新建状态"><a href="#4-1-新建状态" class="headerlink" title="4.1 新建状态"></a>4.1 新建状态</h5><h5 id="4-2-就绪状态"><a href="#4-2-就绪状态" class="headerlink" title="4.2 就绪状态"></a>4.2 就绪状态</h5><h5 id="4-3-运行状态"><a href="#4-3-运行状态" class="headerlink" title="4.3 运行状态"></a>4.3 运行状态</h5><h5 id="4-4-阻塞状态"><a href="#4-4-阻塞状态" class="headerlink" title="4.4 阻塞状态"></a>4.4 阻塞状态</h5><h5 id="4-5-死亡状态"><a href="#4-5-死亡状态" class="headerlink" title="4.5 死亡状态"></a>4.5 死亡状态</h5><h2 id="1-创建线程"><a href="#1-创建线程" class="headerlink" title="1.创建线程"></a>1.创建线程</h2><h4 id="1-1继承Thread类"><a href="#1-1继承Thread类" class="headerlink" title="1.1继承Thread类"></a>1.1继承Thread类</h4><p>创建一个新的类，继承Thread类，然后创建一个该类实例。</p>
<p>继承必须重写run()方法，是新线程的入口点。必须调用start()方法才能执行。</p>
<p>被之上也是实现Runnable接口的一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 写法1 线程类 */</span></span><br><span class="line"><span class="comment">//定义一个类继承Thread类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="type">ThreadTest</span> <span class="variable">threadTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest</span>();</span><br><span class="line">threadTest.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写法2 快速定义一个线程 */</span></span><br><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="1-2实现Runnable接口"><a href="#1-2实现Runnable接口" class="headerlink" title="1.2实现Runnable接口"></a>1.2实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 写法1 线程类 */</span></span><br><span class="line"><span class="comment">//定义一个类实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTest</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="type">RunnableTest</span> <span class="variable">runnableTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableTest</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnableTest);</span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写法2 快速定义一个线程 */</span></span><br><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>

<hr>
<p>继承Thread和实现Runnable这两种方式最大的差别在于，实现Runnable可以同时实现继承，因为Java它是单继承的，所以我们更倾向于使用Runnable的方式实现线程。</p>
<hr>
<h4 id="1-3Callable实现"><a href="#1-3Callable实现" class="headerlink" title="1.3Callable实现"></a>1.3Callable实现</h4><p>Callable的实现<strong>可以返回结果</strong>并且<strong>可能会抛出异常</strong></p>
<p>有两种方式可以实现：1、借助FutureTask执行；2、借助线程池运行</p>
<h5 id="1）借助FutureTask："><a href="#1）借助FutureTask：" class="headerlink" title="1）借助FutureTask："></a>1）借助FutureTask：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 写法1 线程类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//Todo</span></span><br><span class="line">        <span class="keyword">return</span> &lt;T&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="type">CallableTest</span> <span class="variable">callableTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableTest</span>();</span><br><span class="line"><span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(callableTest);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">thread.start();</span><br><span class="line">--获取线程返回值--</span><br><span class="line">System.out.println(futureTask.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写法2 快速定义一个线程 */</span></span><br><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(<span class="keyword">new</span> <span class="title class_">Callable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; call() &#123;</span><br><span class="line">        <span class="comment">//Todo</span></span><br><span class="line">        <span class="keyword">return</span> &lt;T&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">System.out.println(futureTask.get());</span><br></pre></td></tr></table></figure>

<p>FutureTask类是实现了RunnableFuture接口，而RunnableFuture接口继承了Runnable和Future接口；Runnable接口我们都知道，而Future接口它代表的是一个异步计算</p>
<h1 id="2022-11-16学习多线程"><a href="#2022-11-16学习多线程" class="headerlink" title="2022.11.16学习多线程"></a>2022.11.16学习多线程</h1><h2 id="1-什么是线程、多线程？为什么用它？"><a href="#1-什么是线程、多线程？为什么用它？" class="headerlink" title="1.什么是线程、多线程？为什么用它？"></a>1.什么是线程、多线程？为什么用它？</h2><p>我们知道电脑有cpu，它有一个核心参数就是什么8核12线程、16核24线程，我们的计算机大多数只有一个cpu，8核的意思就是模拟出8个核心cpu，12线程表明其中有4个模拟的核心cpu同时拥有两条线程的处理能力，所以在同一时间最多可以有12个线程在处理任务，而我们的应用如QQ它会有非常多的线程，但是并不是所有的线程都会执行任务，很多挂在后台的线程都处于挂起的一个状态，而且当我们的线程不够用的时候，会开始时间片抢夺，我们的任务是交给了线程，然后在cpu中执行，这里就是在模拟的核心cpu中执行的。这就是线程和多线程。（我们打开任务管理器—&gt;性能-打开资源监视器，cpu栏可以看到我们具体有几个线程，我的电脑6核12线程的，表明有12个虚拟cpu在执行任务）<br><img src="/images/%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86/%E7%94%B5%E8%84%91%E6%A0%B8%E5%BF%83%E4%B8%8E%E7%BA%BF%E7%A8%8B.png" alt="电脑核心与线程"></p>
<p>一个线程只能存一个任务在cpu中执行，那如果有多个任务呢，如海量的数据请求我们就可以使用多线程来提高执行效率。而且我们的cpu不是一直都在工作的，发送请求会有网络时间开销，查询数据库会有磁盘IO处理时间开销，我们使用多线程也可以提高cpu的利用率。</p>
<p>我们的任务是交给线程LWP（轻量级进程），它映射到内核线程KLT上，通过操纵调度器对线程进行调度，负责将线程映射到各个处理器上。</p>
<p><img src="/images/%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86/%E7%BA%BF%E7%A8%8B%E4%BB%BB%E5%8A%A1%E6%98%A0%E5%B0%84.jpg" alt="线程任务映射"></p>
<h2 id="2-并发和并行，上下文切换"><a href="#2-并发和并行，上下文切换" class="headerlink" title="2.并发和并行，上下文切换"></a>2.并发和并行，上下文切换</h2><p>并发：我们cpu只有一发，我们的线程就必须要抢夺时间片，就像是每个人抢夺首发一样，这就是并发</p>
<p>并行：多个任务一并执行，这就意味着需要有多个cpu，线程在各自的cpu上执行，这就不需要抢夺时间片了，这就是并行</p>
<p>我们在切换时间片的时候，我们</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
  </entry>
</search>
