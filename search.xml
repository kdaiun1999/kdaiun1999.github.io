<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础</title>
    <url>/2022/11/24/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>​        这里记录着自学的Java基础知识，以及自己的深入理解</p>
<span id="more"></span>

<h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><table>
<thead>
<tr>
<th align="left">类别</th>
<th align="left">关键字</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">访问控制</td>
<td align="left">private</td>
<td align="left">私有的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">protected</td>
<td align="left">受保护的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">public</td>
<td align="left">公共的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">default</td>
<td align="left">默认</td>
</tr>
<tr>
<td align="left">类、方法和变量修饰符</td>
<td align="left">abstract</td>
<td align="left">声明抽象</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">class</td>
<td align="left">类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">extends</td>
<td align="left">扩充,继承</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">final</td>
<td align="left">最终值,不可改变的</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">implements</td>
<td align="left">实现（接口）</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">interface</td>
<td align="left">接口</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">native</td>
<td align="left">本地，原生方法（非 Java 实现）</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">new</td>
<td align="left">新,创建</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">static</td>
<td align="left">静态</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">strictfp</td>
<td align="left">严格,精准</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">synchronized</td>
<td align="left">线程,同步</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">transient</td>
<td align="left">短暂</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">volatile</td>
<td align="left">易失</td>
</tr>
<tr>
<td align="left">程序控制语句</td>
<td align="left">break</td>
<td align="left">跳出循环</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">case</td>
<td align="left">定义一个值以供 switch 选择</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">continue</td>
<td align="left">继续</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">do</td>
<td align="left">运行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">else</td>
<td align="left">否则</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">for</td>
<td align="left">循环</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">if</td>
<td align="left">如果</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">instanceof</td>
<td align="left">实例</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">return</td>
<td align="left">返回</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">switch</td>
<td align="left">根据值选择执行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">while</td>
<td align="left">循环</td>
</tr>
<tr>
<td align="left">错误处理</td>
<td align="left">assert</td>
<td align="left">断言表达式是否为真</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">catch</td>
<td align="left">捕捉异常</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">finally</td>
<td align="left">有没有异常都执行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">throw</td>
<td align="left">抛出一个异常对象</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">throws</td>
<td align="left">声明一个异常可能被抛出</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">try</td>
<td align="left">捕获异常</td>
</tr>
<tr>
<td align="left">包相关</td>
<td align="left">import</td>
<td align="left">引入</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">package</td>
<td align="left">包</td>
</tr>
<tr>
<td align="left">基本类型</td>
<td align="left">boolean</td>
<td align="left">布尔型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">byte</td>
<td align="left">字节型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">char</td>
<td align="left">字符型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">double</td>
<td align="left">双精度浮点</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">float</td>
<td align="left">单精度浮点</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">int</td>
<td align="left">整型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">long</td>
<td align="left">长整型</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">short</td>
<td align="left">短整型</td>
</tr>
<tr>
<td align="left">变量引用</td>
<td align="left">super</td>
<td align="left">父类,超类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">this</td>
<td align="left">本类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">void</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">保留关键字</td>
<td align="left">goto</td>
<td align="left">是关键字，但不能使用</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">const</td>
<td align="left">是关键字，但不能使用</td>
</tr>
</tbody></table>
<h1 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1 基本数据类型"></a>1 基本数据类型</h1><h1 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2 变量类型"></a>2 变量类型</h1><h1 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3 修饰符"></a>3 修饰符</h1><h2 id="3-1-访问修饰符"><a href="#3-1-访问修饰符" class="headerlink" title="3.1 访问修饰符"></a>3.1 访问修饰符</h2><p>public、protected、default、private</p>
<p>他们的区别在于访问的权限不同，可以用于不同的用法</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">当前类</th>
<th align="left">同一包内</th>
<th align="left">子孙类(同一包)</th>
<th align="left">子孙类(不同包)</th>
<th align="left">其他包</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>public</code></td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left"><code>protected</code></td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y/N</td>
<td align="left">N</td>
</tr>
<tr>
<td align="left"><code>default</code></td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">Y</td>
<td align="left">N</td>
<td align="left">N</td>
</tr>
<tr>
<td align="left"><code>private</code></td>
<td align="left">Y</td>
<td align="left">N</td>
<td align="left">N</td>
<td align="left">N</td>
<td align="left">N</td>
</tr>
</tbody></table>
<p>为什么用private去修饰JavaBean？</p>
<p>官方解释：保证它的封装性，不被其他类可以访问到，只能通过类中公共的getter和setter方法去访问，用来隐藏类的实现细节和保护类的数据。</p>
<p>如果我们使用public是为了其他地方可以使用到该类以及类中的方法、变量；而使用private我们就可以对变量的getter和setter方法进行特殊处理，下面举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里就可以直接返回年龄+1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里同样也可以设置get和set方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面三个例子可以看出其实private就是为了使用getter和setter方法，用这个的好处在于如果有特殊处理我们就可以在getter和setter函数中进行处理，否则如果直接用第三种方法我们就需要对每一处用到的地方去做特殊处理，这就会牵一发而动全身，同样地我们也可以用第二种方式来做，但Java约定俗称地使用private</p>
<p>参考：<a href="https://blog.csdn.net/kennethf6986/article/details/83771134">https://blog.csdn.net/kennethf6986/article/details/83771134</a></p>
<h2 id="3-2-非访问修饰符"><a href="#3-2-非访问修饰符" class="headerlink" title="3.2 非访问修饰符"></a>3.2 非访问修饰符</h2><h3 id="3-2-1-static"><a href="#3-2-1-static" class="headerlink" title="3.2.1 static"></a>3.2.1 static</h3><p><strong>修饰类方法和类变量、静态代码块</strong></p>
<p>当我们的类首次被加载的时候，会将静态的变量加载到数据区的方法区，所有创建的实例对象都共享这个变量，它属于一个静态的公共资源，我们可以直接通过类名.变量名对其进行访问，也可以通过对象名.变量名对其进行访问。类首次加载的时候，静态资源加载比构造函数还要先一步，这里的步骤是：加载静态资源—&gt;访问构造函数。</p>
<h4 id="①-修饰类变量："><a href="#①-修饰类变量：" class="headerlink" title="① 修饰类变量："></a>① 修饰类变量：</h4><p>我们可以在类中定义static类变量，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    Test(i) &#123;</span><br><span class="line">        age = age + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就定义了一个静态的变量，当我们首次创建这个类对象的时候，它会先被加载到数据区的方法区（公共的静态资源区域，可以被该类、该类创建的对象共同访问，且数据共享）。</p>
<p>举个例子，我们在主函数的类中定义一个static变量，在我们启动的时候会先去加载这个变量，然后才是主函数，且全局可以访问该变量。</p>
<p>以上面的例子来说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象，加载age到方法区，再执行构造函数</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="number">1</span>);</span><br><span class="line">        System.out.println(test1.age);	<span class="comment">// 输出结果为11</span></span><br><span class="line">        <span class="comment">// 创建对象，执行构造函数</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="number">2</span>);		<span class="comment">// 上面age结果11，这里加2</span></span><br><span class="line">        System.out.println(test2.age);	<span class="comment">// 输出结果为13</span></span><br><span class="line">        <span class="comment">//	创建对象，执行构造函数</span></span><br><span class="line">        <span class="type">Tets</span> <span class="variable">test3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="number">3</span>);		<span class="comment">// 上面age结果13，这里加3</span></span><br><span class="line">        System.out.println(test3.age);	<span class="comment">// 输出结果为16</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="②-修饰类方法："><a href="#②-修饰类方法：" class="headerlink" title="② 修饰类方法："></a>② 修饰类方法：</h4><p>我们可以在类中定义static方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">virtualAge</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">realAge</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(virtualAge);	<span class="comment">// 报错，因为static方法不能使用this</span></span><br><span class="line">        System.out.println(realAge);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAge1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.virtualAge);</span><br><span class="line">        System.out.println(realAge);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.realAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出static修饰的方法不能够使用this指向当前类，只能够调用静态变量，不能访问实例变量。</p>
<p><strong>问：我们为什么用static？</strong></p>
<p>答：我们使用static修饰方法可以直接通过 类.方法 去调用方法，static可以理解成它被赋予在类上，而不是一个副本变量对象上了，我们不能通过this去访问当前类非static属性的变量和方法。</p>
<h4 id="③-静态代码块："><a href="#③-静态代码块：" class="headerlink" title="③ 静态代码块："></a>③ 静态代码块：</h4><p>同样地在类加载阶段会先去调用它。它和静态变量同级，谁在前先走谁。</p>
<p><strong>？？？？？？？？？？？？那我们可以用static来做什么呢？？？？？？？？？？？？？？？</strong></p>
<p>场景1：我们需要记录创建的一个实例总数，我们就可以在类中定义一个static的变量count = 0，构造函数中写count++，表明当我们创建一个实例对象的时候数量就+1。</p>
<p><strong>注意：</strong>同样地，我们的static静态代码块也不能够使用this指向当前类，不能访问实例变量，只能调用静态变量。</p>
<h4 id="④-总结："><a href="#④-总结：" class="headerlink" title="④ 总结："></a>④ 总结：</h4><blockquote>
<p>1、static可以用来修饰类变量、类方法和类静态块</p>
<p>2、初次调用类（静态变量、静态方法）或者创建该类对象（new Test()）时，它会加载类中的静态变量和静态块，静态方法不会被加载，只有当我们调用才会进入。这些加载的静态变量和静态块被存放在公共静态资源区域。</p>
<p>3、静态变量我们通常用来作为全局使用的一个变量；静态方法我们通常用它做工具类方法。</p>
<p>4、我们在静态方法中不能使用this去指向当前类对象获取非静态资源，如果要使用非静态资源就不能使用静态方法或者将非静态变量换成静态变量。</p>
<p>5、构造方法只有在创建该类对象时才会去调用，但是初次创建会先调用静态变量和静态块。</p>
<p>6、this的一点理解，我们的this是指向当前对象的，可以理解为这个副本，而非静态变量和非静态方法其实对应的是这个对象上的一个属性和行为，我们用this就可以获取到当前对象的这个属性和行为，而加了static就表明这不是个人使用的，是整个类的，是大家所共有的，所以规定成不能使用this指向，static修饰的变量和方法是可以直接通过类去访问的。</p>
</blockquote>
<h3 id="3-2-2-final"><a href="#3-2-2-final" class="headerlink" title="3.2.2 final"></a>3.2.2 final</h3><p><strong>修饰类变量和类方法</strong></p>
<h4 id="1-修饰类变量"><a href="#1-修饰类变量" class="headerlink" title="1.修饰类变量"></a>1.修饰类变量</h4><p>用final修饰类变量，表示它不可被修改，且必须初始化值如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
</search>
